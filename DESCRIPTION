Package: flowengineR
Type: Package
Title: Modular and extensible framework for designing and executing algorithmic workflows in R
Version: 1.0.0
Authors@R: 
    c(person("Maximilian", "Willer", 
            email = "willer.maximilian@googlemail.com", 
            role = c("aut", "cre")
            ),
      person("Peter", "Ruckdeschel", 
            email = "peter.ruckdeschel@uni-oldenburg.de",
            role = c("ctb")
            )
      )
Description: 
    flowengineR is a modular and extensible framework for designing and executing 
    algorithmic workflows in R. It provides a standardized infrastructure to combine
    data-splitting, execution, preprocessing, core algorithms, in-processing, 
    post-processing, evaluation, reporting, and publishing using interchangeable 
    engine components.
    While applicable to a wide range of computational methods — including but not 
    limited to machine learning — the framework emphasizes transparency, reproducibility, 
    and user control across all stages of algorithm development.
    One core application domain is fairness-aware modeling: flowengineR includes 
    ready-to-use engines for implementing fairness interventions at various workflow stages.
    These can be freely combined with other engines or extended to support goals like 
    robustness, explainability, or domain-specific compliance.
    The framework defines a fixed set of typed engine categories (e.g., preprocessing, 
    training, postprocessing, evaluation, reporting), each governed by standardized 
    input/output interfaces and supported by controller functions that validate inputs 
    and manage execution logic. This structured design facilitates systematic reuse, 
    benchmarking, and the orchestration of complex multi-step workflows.
    Unlike GUI-oriented workflow tools such as KNIME or task schedulers like Airflow, 
    flowengineR is entirely script-based and designed for programmatic flexibility 
    and reproducibility. It enables logic-driven execution and transparent handling of 
    modular components in a fully R-native environment.
    Its architecture supports custom engine development and encourages modular reuse 
    for research, prototyping, and production-grade analysis workflows. It also 
    enables adaptive or parallel execution strategies (e.g., via SLURM or batchtools), 
    and can resume interrupted workflows through checkpoint-compatible components.
License: MIT + file LICENSE
Encoding: UTF-8
LazyData: true
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.3.2
Depends: R (>= 4.1.0)
Imports:
    rstudioapi,
    ggplot2,
    caret,
    moments,
    rmarkdown,
    openxlsx,
    batchtools,
    randomForest,
    grDevices,
    parallel,
    cli,
    glue,
    utils
Suggests:
    testthat (>= 3.0.0),
    knitr
VignetteBuilder: knitr
Config/testthat/edition: 3
