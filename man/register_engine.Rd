% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1_b_registry.R
\name{register_engine}
\alias{register_engine}
\title{Register an Engine in the fairnessToolbox Framework}
\usage{
register_engine(engine_name, file_path)
}
\arguments{
\item{engine_name}{Character. Name of the engine, e.g., \code{"train_lm"}.}

\item{file_path}{Character. Path to the R script that defines the engine components.}
}
\value{
Invisibly registers the engine into \code{.GlobalEnv$engines[[engine_name]]} if valid.
}
\description{
Dynamically loads, validates, and registers a new engine into the global \code{engines} registry.
This function is a central building block of the fairnessToolbox modular architecture, allowing
users to integrate custom engines for training, splitting, evaluation, fairness processing,
reporting, or execution.
}
\details{
\strong{Workflow:}
\enumerate{
\item Loads the engine file using \code{source()}.
\item Expects the file to contain:
\itemize{
\item \verb{wrapper_<engine_name>}: Standardized interface.
\item \verb{engine_<engine_name>}: Core logic function.
\item \verb{default_params_<engine_name>}: List of default hyperparameters.
}
\item Calls a type-specific validation function, e.g., \code{validate_engine_train()}.
\item If validation passes, the wrapper function is registered under \code{.GlobalEnv$engines}.
}

\strong{Supported Engine Types:}
\itemize{
\item \verb{split_*}: Splitter engines
\item \verb{execution_*}: Execution strategies (e.g., sequential, SLURM)
\item \verb{fairness_pre_*}: Fairness processing methods
\item \verb{train_*}: Training engines
\item \verb{fairness_in_*}: Fairness processing methods
\item \verb{fairness_post_*}: Fairness processing methods
\item \verb{eval_*}: Evaluation metrics
\item \verb{report_*}: Full report builders
\item \verb{reportelement_*}: Report element builders (tables, plots)
\item \verb{publish_*}: Publishing engines (e.g., PDF, HTML)
}

\strong{Validation Mechanism:}
A centralized validation function (e.g., \code{validate_engine_train()}) is automatically
called by \code{register_engine()} based on the engine type. It checks structure, formal
arguments, return types, and naming conventions.

\strong{Skipping Validation (Advanced Use):}
Wrappers can opt out of validation (e.g., during prototyping) by returning
\code{list(skip_validation = TRUE)} during test execution.

\strong{Example:}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{register_engine(
  engine_name = "train_customtree",
  file_path = "engines/train/train_customtree.R"
)
}\if{html}{\out{</div>}}
}
