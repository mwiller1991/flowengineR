% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/2_6_a_engine_postprocessing_fairness_genresidual.R
\name{wrapper_postprocessing_fairness_genresidual}
\alias{wrapper_postprocessing_fairness_genresidual}
\title{Wrapper for Fairness Post-Processing Engine: General Residual Adjustment}
\usage{
wrapper_postprocessing_fairness_genresidual(control)
}
\arguments{
\item{control}{A standardized control object (must include \code{control$vars} and a valid \code{control$params$postprocessing}).}
}
\value{
A standardized fairness post-processing output.
}
\description{
Validates and prepares standardized inputs, applies default parameters,
and invokes the residual-based post-processing engine.
Returns a standardized output using \code{initialize_output_postprocessing()}.
}
\details{
\strong{Standardized Inputs:}
\itemize{
\item \code{control$params$postprocessing$postprocessing_data$predictions}: Numeric vector of model predictions (injected by workflow).
\item \code{control$params$postprocessing$postprocessing_data$actuals}: Numeric vector of true observed values (injected by workflow).
\item \code{control$params$postprocessing$protected_name}: Character vector of protected attribute names (binary).
Auto-filled from \code{control$vars$protected_vars_binary} via \code{autofill_controllers_from_vars()}.
\item \code{control$params$postprocessing$params}: Optional engine-specific parameters (not used here).
}

\strong{Binary Attribute Requirement:}
\itemize{
\item All protected attributes listed in \code{protected_name} must be binary (e.g., 0/1, TRUE/FALSE).
\item Post-processing engines in fairnessToolbox are not designed for multi-class or continuous protected attributes.
\item Binary transformation must be performed during setup (e.g. via \code{controller_vars(protected_vars_binary = ...)}).
}

\strong{Engine-Specific Parameters (\code{control$params$postprocessing$params}):}
\itemize{
\item None. This engine performs a fixed residual adjustment and requires no tunable settings.
}

\strong{Workflow Integration:}
\itemize{
\item \code{protected_name} are \strong{automatically filled} based on \code{control$vars}.
\item These inputs must be respected by all engines but \strong{do not need to be set manually} in the controller.
\item This wrapper ensures these values are passed correctly to the engine.
}

\strong{Example Control Snippet:}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{control$engine_select$postprocessing <- "postprocessing_fairness_genresidual"
control$params$postprocessing <- controller_postprocessing(
  params = list()
)
}\if{html}{\out{</div>}}

\strong{Template Reference:}
See full template in \verb{inst/templates_control/6_a_template_postprocessing_fairness_genresidual.R}

\strong{Standardized Output (returned to framework):}
\itemize{
\item A list structured via \code{initialize_output_postprocessing()}:
\itemize{
\item \code{adjusted_predictions}: Residual-adjusted prediction vector.
\item \code{method}: \code{"general_residual"}.
\item \code{input_data}: List with \code{predictions} and \code{actuals}.
\item \code{protected_attributes}: Names of protected attributes used (binary).
\item \code{params}: Final parameter list (empty for this engine).
\item \code{specific_output}: \code{NULL}
}
}
}
\seealso{
\code{\link[=engine_postprocessing_fairness_genresidual]{engine_postprocessing_fairness_genresidual()}},
\code{\link[=default_params_postprocessing_fairness_genresidual]{default_params_postprocessing_fairness_genresidual()}},
\code{\link[=initialize_output_postprocessing]{initialize_output_postprocessing()}},
\code{\link[=controller_postprocessing]{controller_postprocessing()}},
Template: \verb{inst/templates_control/6_a_template_postprocessing_fairness_genresidual.R}
}
\keyword{internal}
