% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1_c__subregistry_validate_engines__mwiller.R
\name{validate_engine_inprocessing}
\alias{validate_engine_inprocessing}
\title{Subregistry Validation for In-Processing Engines}
\usage{
validate_engine_inprocessing(
  wrapper_function,
  default_params_function,
  engine_name
)
}
\arguments{
\item{wrapper_function}{Function. The wrapper function for the in-processing engine.}

\item{default_params_function}{Function. The function providing default parameters for the engine.}

\item{engine_name}{Character. The name of the engine being validated (e.g., \code{"inprocessing_weightedloss"}).}
}
\value{
TRUE if the engine passes structural validation; otherwise, an error is raised.
}
\description{
Validates in-processing engines during registration via \code{register_engine()}.
Ensures structural consistency with the required interface and output format.
}
\details{
\strong{Purpose:}
\itemize{
\item Confirms that the wrapper function:
\itemize{
\item Uses the correct argument signature: \verb{function(control, driver_train)}
\item Calls the initializer: \code{initialize_output_inprocessing()}
\item Returns a valid in-processing output structure.
}
}

\strong{Scope:}
\itemize{
\item Applies to all engines of type \verb{inprocessing_*}.
\item Triggered automatically by \code{register_engine()} unless validation is bypassed using an internal skip flag.
}

\strong{Note:}
\itemize{
\item Functional validation (i.e., test run) is skipped due to the complexity of requiring a working training engine as input.
\item Structural validation ensures interface consistency, enabling safe embedding into the modular workflow.
}
}
\keyword{internal}
