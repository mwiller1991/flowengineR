% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/2_2_2_c__engine_execution_adaptive_output_batchtools_slurm__mwiller.R
\name{wrapper_execution_adaptive_output_batchtools_slurm}
\alias{wrapper_execution_adaptive_output_batchtools_slurm}
\title{Wrapper for Execution Engine: Adaptive Batchtools SLURM Stability}
\usage{
wrapper_execution_adaptive_output_batchtools_slurm(control, split_output)
}
\arguments{
\item{control}{A standardized control object (see \code{controller_execution()}).}

\item{split_output}{A list with exactly one split, used for structure validation.}
}
\value{
A standardized execution output object.
}
\description{
Executes batches of 1-split workflows in parallel using \code{batchtools} with a SLURM backend.
In each iteration, \code{n_splits_per_iteration} splits are generated and executed concurrently on the cluster.
The wrapper continues execution until convergence is achieved or a predefined maximum number of iterations is reached.
}
\details{
\strong{Important Constraint:}
Only splitter engines that return \strong{exactly one split} are supported.
Splitters such as cross-validation (\code{split_cv}) with \code{cv_folds > 1} are \strong{not allowed}.

\strong{Standardized Inputs:}
\itemize{
\item \code{control}: The full control object.
\item \code{split_output}: Dummy result from the splitter to verify compatibility.
\item \code{control$params$execution$params}: Execution-specific configuration (see below).
}

\strong{Engine-Specific Parameters (\code{control$params$execution$params}):}
\itemize{
\item \code{metric_name} \emph{(character, default = "mse")}: Metric to monitor.
\item \code{metric_source} \emph{(character, default = "eval_mse")}: Evaluation engine providing the metric.
\item \code{stability_strategy} \emph{(character)}: Strategy to assess convergence.
Allowed values:
\code{"custom_relative"}, \code{"custom_absolute"}, \code{"mean_relative"}, \code{"mean_absolute"},
\code{"sd_relative"}, \code{"sd_absolute"}, \code{"mad_relative"}, \code{"mad_absolute"},
\code{"cv_relative"}, \code{"cv_absolute"}, \code{"cohen_absolute"}
\item \code{threshold} \emph{(numeric)}: Threshold value for the chosen strategy.
\item \code{window} \emph{(integer ≥ 2)}: Number of trailing values to consider for stability.
\item \code{min_splits} \emph{(integer ≥ 1)}: Minimum number of splits before stability can be evaluated.
\item \code{max_splits} \emph{(integer ≥ min_splits)}: Maximum allowed number of splits.
\item \code{custom_stability_function} \emph{(function or NULL)}: Optional custom stability checker.
\item \code{seed_base} \emph{(integer)}: Base seed; actual seeds are \code{seed_base + i}.
\item \code{n_splits_per_iteration} \emph{(integer ≥ 1)}: Number of splits per iteration (= number of parallel jobs).
\item \code{registry_folder} \emph{(character)}: Directory path to store batchtools registry (must be writeable).
\item \code{slurm_template} \emph{(character)}: Path to the SLURM template file.
\item \code{seed} \emph{(integer)}: Seed for batchtools registry initialization.
\item \code{required_packages} \emph{(character vector)}: R packages to be loaded in each job.
\item \code{resources} \emph{(list)}: SLURM-specific job settings (e.g., \code{ncpus}, \code{memory}, \code{walltime}).
}

\strong{Example Control Snippet:}

\if{html}{\out{<div class="sourceCode">}}\preformatted{control$engine_select$execution <- "execution_adaptive_output_batchtools_slurm"
control$params$execution <- controller_execution(
  params = list(
    metric_name = "mse",
    metric_source = "eval_mse",
    stability_strategy = "cohen_absolute",
    threshold = 0.2,
    window = 3,
    min_splits = 5,
    max_splits = 50,
    seed_base = 2000,
    n_splits_per_iteration = 3,
    registry_folder = "~/flowengineR/tests/BATCHTOOLS/bt_SLURM_adaptive_output/bt_registry_SLURM",
    slurm_template = "~/flowengineR/tests/BATCHTOOLS/bt_SLURM_adaptive_output/default.tmpl",
    seed = 123,
    required_packages = c("caret", "dplyr"),
    resources = list(ncpus = 2, memory = 4096, walltime = 3600)
  )
)
}\if{html}{\out{</div>}}

\strong{Template Reference:}
See \verb{inst/templates_control/2_2_c_template_execution_adaptive_output_batchtools_slurm.R}

\strong{Standardized Output (returned to framework):}
List created by \code{initialize_output_execution()}:
\itemize{
\item \code{execution_type}: \code{"adaptive_output_batchtools_slurm"}
\item \code{workflow_results}: List of results from \code{run_workflow_singlesplitloop()} per split
\item \code{params}: Final parameter list used
\item \code{continue_workflow}: Always \code{TRUE}
\item \code{specific_output}: Includes:
\itemize{
\item \code{metric_name}, \code{metric_source}
\item \code{values}: Vector of tracked metric values
\item \code{split_output}: Reconstructed \code{split_output} object
\item \code{used_seeds}: Named list of used seeds
}
}
}
\seealso{
\code{\link[=engine_execution_adaptive_output_batchtools_slurm]{engine_execution_adaptive_output_batchtools_slurm()}},
\code{\link[=default_params_execution_adaptive_output_batchtools_slurm]{default_params_execution_adaptive_output_batchtools_slurm()}},
\code{\link[=initialize_output_execution]{initialize_output_execution()}},
\code{\link[=controller_execution]{controller_execution()}},
Template: \verb{inst/templates_control/2_2_c_template_execution_adaptive_output_batchtools_slurm.R}
}
\keyword{internal}
