% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1_c_subregistry_validate_engines.R
\name{validate_engine_publish}
\alias{validate_engine_publish}
\title{Subregistry Validation for Publish Engines}
\usage{
validate_engine_publish(wrapper_function, default_params_function, engine_name)
}
\arguments{
\item{wrapper_function}{Function. The wrapper function for the publish engine.}

\item{default_params_function}{Function. The default parameter function for the engine.}

\item{engine_name}{Character. Name of the engine being validated (e.g., \code{"publish_pdf"}).}
}
\value{
TRUE if the engine passes structural validation; otherwise an error is raised.
}
\description{
Validates publish engines during dynamic registration via \code{register_engine()}.
Ensures that the publish engine adheres to the standardized input interface and
produces output using \code{initialize_output_publish()}.
}
\details{
\strong{Purpose:}
\itemize{
\item Ensures compatibility with the publishing architecture of the framework.
\item Guarantees that publish engines follow the required structure for writing files.
}

\strong{Validation Criteria:}
\itemize{
\item Wrapper must accept the following arguments:
\itemize{
\item \code{control}: The full workflow control object.
\item \code{object}: The object to be published (either a report or a reportelement).
\item \code{file_path}: Output path for saving the file.
\item \code{alias_publish}: Identifier string used for referencing the publish object.
}
\item Wrapper must call \code{initialize_output_publish()} to return standardized output.
\item No functional validation is performed (structure-only check).
}

\strong{When to Use:}
\itemize{
\item Automatically triggered during \code{register_engine()} for any \verb{publish_*} engine.
\item Can also be called manually for pre-testing new publishing engines.
}
}
\keyword{internal}
