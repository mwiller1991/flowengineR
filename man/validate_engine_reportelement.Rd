% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1_c__subregistry_validate_engines__mwiller.R
\name{validate_engine_reportelement}
\alias{validate_engine_reportelement}
\title{Subregistry Validation for Reportelement Engines}
\usage{
validate_engine_reportelement(
  wrapper_function,
  default_params_function,
  engine_name
)
}
\arguments{
\item{wrapper_function}{Function. The wrapper function for the reportelement engine.}

\item{default_params_function}{Function. Provides default parameters for the engine.}

\item{engine_name}{Character. Name of the engine being validated (e.g., \code{"reportelement_boxplot_predictions"}).}
}
\value{
TRUE if the engine passes structural validation; otherwise an error is raised.
}
\description{
Validates reportelement engines during dynamic registration via \code{register_engine()}.
Ensures that the engine adheres to the standardized interface and returns
output in the expected structure using \code{initialize_output_reportelement()}.
}
\details{
\strong{Purpose:}
\itemize{
\item Confirms structural compatibility of engines with the flowengineR reporting layer.
\item Allows seamless composition of reports from validated reportelements.
}

\strong{Validation Criteria:}
\itemize{
\item Wrapper must accept the following arguments:
\itemize{
\item \code{control}: Workflow control object.
\item \code{workflow_results}: Results from training and evaluation.
\item \code{split_output}: Output from splitter engine.
\item \code{alias}: Identifier for the reportelement.
}
\item Wrapper must call \code{initialize_output_reportelement()}.
\item No functional test is performed, as the output content is engine-specific and diverse.
}

\strong{When to Use:}
\itemize{
\item Automatically triggered by \code{register_engine()} if an engine name starts with \code{reportelement_}.
\item Can also be called manually to pre-check engines before registration.
}
}
\keyword{internal}
