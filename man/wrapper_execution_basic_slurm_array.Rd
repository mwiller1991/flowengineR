% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/2_2_1_b_engine_execution_basic_slurm_array.R
\name{wrapper_execution_basic_slurm_array}
\alias{wrapper_execution_basic_slurm_array}
\title{Wrapper for Execution Engine: SLURM Array Preparation}
\usage{
wrapper_execution_basic_slurm_array(control, split_output)
}
\arguments{
\item{control}{A standardized control object.}

\item{split_output}{A list of splits from the splitter engine.}
}
\value{
A standardized execution output indicating that external SLURM execution is required.
}
\description{
Prepares files for distributed execution via SLURM array jobs by storing the control object
and split definitions to disk. This wrapper does not execute any models directly.
}
\details{
\strong{Standardized Inputs:}
\itemize{
\item \code{control}: The full control object containing workflow configuration.
\item \code{split_output}: The result from the splitter engine containing multiple data splits.
\item \code{control$params$execution$params}: Engine-specific parameters (see below).
}

\strong{Engine-Specific Parameters (\code{control$params$execution$params}):}
\itemize{
\item \code{output_folder} \emph{(character, default = "slurm_inputs")}: Directory to store the control and split files.
}

\strong{Notes:}
\itemize{
\item This wrapper \strong{only prepares input files} for SLURM execution. The actual model training must be performed externally.
\item The control object, split output, and number of splits are written to \code{output_folder}.
}

\strong{Example Control Snippet:}

\if{html}{\out{<div class="sourceCode">}}\preformatted{control$engine_select$execution <- "execution_basic_slurm_array"
control$params$execution <- controller_execution(
  params = list(output_folder = "slurm_inputs")
)
}\if{html}{\out{</div>}}

\strong{Template Reference:}
See full template in \verb{inst/templates_control/2_1_b_template_control_execution_basic_slurm_array.R}

\strong{Resuming Workflow after SLURM Execution:}
After completing the external SLURM jobs, resume the workflow using:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{resume_object <- prepare_resume_from_slurm_array(
  control_path = "slurm_inputs/control_base.rds",
  split_output_path = "slurm_inputs/split_output.rds",
  result_dir = "slurm_outputs/"
)
result <- resume_workflow(resume_object)
}\if{html}{\out{</div>}}

\strong{Standardized Output (returned to framework):}
A list structured via \code{initialize_output_execution()}:
\itemize{
\item \code{execution_type}: \code{"basic_slurm_array"}
\item \code{workflow_results}: \code{NULL} (execution deferred to SLURM)
\item \code{params}: Engine parameters (merged default and user-defined)
\item \code{continue_workflow}: \code{FALSE} (must be resumed via \code{resume_workflow()})
\item \code{specific_output}: List with:
\itemize{
\item \code{message}: Informative status string
\item \code{output_dir}: Path to directory containing saved inputs
\item \code{n_splits}: Number of splits prepared for execution
}
}
}
\seealso{
\code{\link[=engine_execution_basic_slurm_array]{engine_execution_basic_slurm_array()}},
\code{\link[=default_params_execution_basic_slurm_array]{default_params_execution_basic_slurm_array()}},
\code{\link[=initialize_output_execution]{initialize_output_execution()}},
\code{\link[=controller_execution]{controller_execution()}},
Template: \verb{inst/templates_control/2_1_b_template_control_execution_basic_slurm_array.R}
Helper: \code{\link[=prepare_resume_from_slurm_array]{prepare_resume_from_slurm_array()}}, \code{\link[=show_template]{show_template()}}
}
\keyword{internal}
