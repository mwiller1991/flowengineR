% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/2_4__initialize_output_train__mwiller.R
\name{initialize_output_train}
\alias{initialize_output_train}
\title{Output Initializer: Training Engine Results}
\usage{
initialize_output_train(
  model,
  model_type,
  formula,
  predictions = NULL,
  hyperparameters = NULL,
  specific_output = NULL
)
}
\arguments{
\item{model}{Trained model object returned by the engine.}

\item{model_type}{Character string describing the model type (e.g., \code{"lm"}, \code{"gbm"}).}

\item{formula}{Formula used for training (e.g., \code{target ~ .}).}

\item{predictions}{(Optional) Numeric vector of predictions. Should be filled \strong{after} training in the workflow.}

\item{hyperparameters}{(Optional) Named list of hyperparameters used for training.}

\item{specific_output}{(Optional) List of engine-specific additional outputs.}
}
\value{
A named list with standardized training results for the workflow.
}
\description{
Creates a standardized output object for \strong{training engines} within the flowengineR
This function ensures that all training engines return results in a uniform structure,
enabling downstream components (e.g., postprocessing, evaluation, reporting) to function
independently of the specific model used.
}
\details{
\strong{Purpose:}
\itemize{
\item Enforces a consistent interface between training engines and the workflow.
}

\strong{Standardized Output:}
\itemize{
\item \code{model}: The trained model object (e.g., a \code{gbm}, \code{lm}, or caret model).
\item \code{model_type}: A string identifying the model type (e.g., \code{"gbm"}).
\item \code{formula}: The formula used for training (e.g., \code{target ~ .}).
\item \code{predictions}: filled externally by the workflow after prediction.
\item \code{hyperparameters}: Optional list of hyperparameters used during training.
\item \code{specific_output}: Optional list of additional engine-specific outputs (e.g., feature importances).
}

\strong{Usage Example (inside an engine):}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{model <- gbm:gbm(formula = control$params$train$formula, data = control$params$train$data)
hyperparams <- merge_with_defaults(control$params$train$params, default_params_train_gbm())
initialize_output_train(
  model = model,
  model_type = "gbm",
  formula = control$params$train$formula,
  hyperparameters = hyperparams,
  specific_output = list(feature_importance = model$importance)
)
}\if{html}{\out{</div>}}
}
